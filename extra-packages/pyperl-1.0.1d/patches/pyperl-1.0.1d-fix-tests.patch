--- pyperl-1.0.1c/t/kw-arg.py	2005-07-14 11:43:17.000000000 +0200
+++ pyperl-1.0.1d/t/kw-arg.py	2007-10-20 01:13:28.000000000 +0200
@@ -19,7 +19,7 @@ sub foo {
         $o->foo();
     };
     #print $@;
-    print "not " unless "$@" =~ /^python.exceptions.TypeError: foo\(\) takes at least 2 arguments \(1 given\)/;
+    print "not " unless "$@" =~ /^python.<type 'exceptions.TypeError'>: foo\(\) takes at least 2 arguments \(1 given\)/;
     print "ok 1\n";
 
     my $res;
--- pyperl-1.0.1c/t/py-obj.py	2005-11-17 10:38:11.000000000 +0100
+++ pyperl-1.0.1d/t/py-obj.py	2007-10-20 01:15:52.000000000 +0200
@@ -70,7 +70,7 @@ sub foo {
    eval {
        $foo->plain_list("foo", "bar");
    };
-   print "not " unless $@ && $@ =~ /^python\.exceptions\.TypeError: 'list' object is not callable/;
+   print "not " unless $@ && $@ =~ /^python\.<type 'exceptions\.TypeError'>: 'list' object is not callable/;
    print "ok 13\n";
 
    # Strings are a sequences too, but they are not unwrapped.
--- pyperl-1.0.1c/t/apply.py	2005-07-14 11:43:17.000000000 +0200
+++ pyperl-1.0.1d/t/apply.py	2007-10-20 01:20:38.000000000 +0200
@@ -26,21 +26,21 @@ sub {
     # XXX For some strange reason =~ is not to force $@ to stingify, so
     # I had to help it with "$@" =~.
     # Hmmm, something to fix some other time :-(
-    print "not " unless "$@" =~ /^python\.exceptions\.TypeError: ok\(\) takes at least 1 argument \(0 given\)/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) takes at least 1 argument \(0 given\)/;
     print "ok 1\n";
 
     eval {
        apply($f, undef);
     };
     #print $@;
-    print "not " unless "$@" =~ /^python\.exceptions\.TypeError: ok\(\) takes at least 1 argument \(0 given\)/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) takes at least 1 argument \(0 given\)/;
     print "ok 2\n";
 
     eval {
        apply($f, undef, undef);
     };
     #print $@;
-    print "not " unless "$@" =~ /^python\.exceptions\.TypeError: ok\(\) takes at least 1 argument \(0 given\)/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) takes at least 1 argument \(0 given\)/;
     print "ok 3\n";
 
     eval {
@@ -54,28 +54,28 @@ sub {
        apply($f, [1,2,3]);
     };
     #print $@;
-    print "not " unless "$@" =~ /^python.exceptions.TypeError: ok\(\) takes at most 2 arguments \(3 given\)/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) takes at most 2 arguments \(3 given\)/;
     print "ok 5\n";
 
     eval {
        apply($f, [], {b => 2});
     };
     #print $@;
-    print "not " unless "$@" =~ /^python\.exceptions\.TypeError: ok\(\) takes at least 1 non-keyword argument \(0 given\)/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) takes at least 1 non-keyword argument \(0 given\)/;
     print "ok 6\n";
 
     eval {
        apply($f, [1], {a => 2});
     };
     #print $@;
-    print "not " unless "$@" =~ /^python.exceptions.TypeError: ok\(\) got multiple values for keyword argument 'a'/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) got multiple values for keyword argument 'a'/;
     print "ok 7\n";
 
     eval {
        apply($f, [], {a => 2, b => 3, c => 4});
     };
     #print $@;
-    print "not " unless "$@" =~ /^python.exceptions.TypeError: ok\(\) got an unexpected keyword argument 'c'/;
+    print "not " unless "$@" =~ /^python\.<type 'exceptions.TypeError'>: ok\(\) got an unexpected keyword argument 'c'/;
     print "ok 8\n";
 
     eval {
