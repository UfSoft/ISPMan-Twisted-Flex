<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:controls="org.ufsoft.ispman.controls.*"
                layout="absolute"
                label="ISPMan"
                pageTitle="ISPMan"
                width="100%"
                height="100%"
                initialize="setupInitialLocale(event)"
                creationComplete="creationComplete(event)">

    <mx:Style source="styles/style.css" />

    <mx:Script>
      import mx.collections.ArrayCollection;
      import mx.controls.Alert;
      import mx.events.FlexEvent;
      import mx.managers.PopUpManager;
      import flash.display.DisplayObject;

      import mx.resources.ResourceBundle;
      import mx.events.ResourceEvent;


      import mx.messaging.ChannelSet;
      import mx.messaging.channels.SecureAMFChannel;
      import mx.rpc.AbstractOperation;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.rpc.remoting.mxml.RemoteObject;

      import net.zengrong.logging.Firebug;

      import org.ufsoft.ispman.i18n.Locale;
      import org.ufsoft.ispman.models.AuthenticatedUser;
      import org.ufsoft.ispman.events.LoadDataEvent;
      import org.ufsoft.ispman.events.AuthenticationEvent;
      import org.ufsoft.ispman.events.TranslationEvent;
      import org.ufsoft.ispman.components.AuthDialog;
      import org.ufsoft.ispman.components.Overview;
      import org.ufsoft.ispman.components.domains.ManageDomain;
      import org.ufsoft.ispman.components.processes.ProcessesOverview;

      // VARS
      private var authDialog        : AuthDialog;
      private var overview          : Overview;
      private var manageDomain      : ManageDomain;
      private var user              : AuthenticatedUser;
      private var _currentChild     : DisplayObject;
      private var processesOverview : ProcessesOverview;
      public var cookie             : SharedObject;

      [Bindable]
      private var availableDomains  : ArrayCollection;

      private var locale            : Locale;

      private function setupInitialLocale(event:FlexEvent):void {
        cookie = SharedObject.getLocal("ISPManCP");
        locale = Locale.getInstance()
        locale.addEventListener(TranslationEvent.LOADED, updateComboPrompt)
        locale.load(cookie.data.locale || 'en_US');
      }

      private function creationComplete(event:FlexEvent) : void {


        Firebug.debug("We have lift off!");
        addEventListener(AuthenticationEvent.NEEDED, AuthenticationNeeded);
        addEventListener(LoadDataEvent.LOAD, loadDataForEvent);
        addEventListener(AuthenticationEvent.SEND, authenticate);
        addEventListener(AuthenticationEvent.SUCESS, displayOverview);

        // Test with a fake user for existing session
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.SEND,
                                              new AuthenticatedUser('', '', 1)));
      }

      private function AuthenticationNeeded(event:Event) : void {
        authDialog = new AuthDialog();
        if ( user ) {
            authDialog.user = user;
        }
        authDialog.addEventListener(AuthenticationEvent.SEND, authenticate);
        PopUpManager.addPopUp(authDialog, DisplayObject(this), true);
      }

      protected function authenticate(event:AuthenticationEvent) : void {
        user = event.user;
        var operation: AbstractOperation=getOperation('auth.login',
                                                      authenticateSuccess,
                                                      authenticateFailure);
        operation.send(event.user);
      }

      protected function authenticateFailure(event:FaultEvent) : void {
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.FAILURE));
        if (event.fault.faultCode == 'AuthenticationNeeded') {
          dispatchEvent(new AuthenticationEvent(AuthenticationEvent.NEEDED));
        } else {
          var errorMsg : String="Authentication Failed " + event.fault.faultCode;
          Alert.show(event.fault.faultDetail, errorMsg);
        }
      }

      protected function authenticateSuccess(event:ResultEvent) : void {
        logout.addEventListener("click", doLogout);
        logout.enabled = true;
        PopUpManager.removePopUp(authDialog);
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.SUCESS));
      }

      private function switchContent(content:DisplayObject): void {
        if ( _currentChild ) {
          mainContent.removeChild(_currentChild);
        }
        _currentChild = content;
        mainContent.addChild(content);
      }

      protected function displayOverview(event:Event):void {
        overview = new Overview();
        switchContent(overview);
        chooseDomainCombo.selectedIndex = -1;
      }

      protected function doLogout(event:Event) : void {
        var operation: AbstractOperation=getOperation('auth.logout', doLogoutSucess);
        operation.send();
      }

      protected function doLogoutSucess(event:ResultEvent) : void {
        user = null;
        logout.enabled = false;
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.NEEDED));
      }

      private function loadDataForEvent(event:LoadDataEvent) : void {
        var operation: AbstractOperation=getOperation(event.endpoint, loadDataForEventSucess);
        operation.send();
      }

      private function loadDataForEventSucess(event:ResultEvent) : void {
        availableDomains = event.result as ArrayCollection;
      }

      private function updateComboPrompt(event:TranslationEvent):void {
        chooseDomainCombo.prompt = resourceManager.getString("ispman", "Choose Domain");
      }

      /*
       * Function to load the selected domain panel
       */
      private function domainChange(event:Event):void {
        manageDomain = new ManageDomain();
        manageDomain.domain = chooseDomainCombo.selectedItem;
        switchContent(manageDomain);
      }

      private function loadProcessesOverview(event:Event):void {
        processesOverview = new ProcessesOverview();
        switchContent(processesOverview);
        chooseDomainCombo.selectedIndex = -1;
      }

      public function getService() : RemoteObject {
        var url : String='https://{server.name}:{server.port}/service';
        var channel : SecureAMFChannel=new SecureAMFChannel("pyamf-channel", url);
        // Create a channel set and add your channel(s) to it
        var channels : ChannelSet=new ChannelSet();
        channels.addChannel(channel);

        // Create a new remote object and set channels
        var remoteObject : RemoteObject=new RemoteObject("ISPManService");

        remoteObject.showBusyCursor = true;
        remoteObject.channelSet = channels;
        remoteObject.addEventListener(FaultEvent.FAULT, onServiceFault);
        return remoteObject;
      }

      public function getOperation(
        endpoint:String,
        successListenerFunction:Function,
        failureListenerFunction:Function=null):AbstractOperation
      {
        var remoteObj : RemoteObject=getService();
        var operation : AbstractOperation=remoteObj.getOperation(endpoint);
        operation.addEventListener(ResultEvent.RESULT, successListenerFunction);
        if ( failureListenerFunction!=null ) {
          operation.addEventListener(FaultEvent.FAULT, failureListenerFunction);
        } else {
          operation.addEventListener(FaultEvent.FAULT, onServiceFault);
        }
        return operation
      }

      /**
       * Service reported an error.
       *
       * @param event Event containing error information.
       */
      protected function onServiceFault(event : FaultEvent) : void {
        if (event.fault.faultCode == 'AuthenticationNeeded') {
          dispatchEvent(new AuthenticationEvent(AuthenticationEvent.NEEDED));
        } else {
          var errorMsg : String=event.fault.faultCode;
          Alert.show(event.fault.faultDetail, errorMsg);
        }
      }

    </mx:Script>
    <mx:ApplicationControlBar width="100%" dock="true" id="appCB">
        <mx:HBox width="100%">
            <mx:Button id="overviewButton"
                       label='{resourceManager.getString("ispman", "Overview")}'
                       click="displayOverview(event)"/>
            <mx:ComboBox id="chooseDomainCombo"
                         prompt="Choose Domain"
                         labelField="label" dataProvider="{availableDomains}"
                         change="domainChange(event)"/>
            <mx:Spacer width="100%"/>
            <controls:ProcessesButton click="loadProcessesOverview(event)"/>
            <mx:Button id="ispman_home" label="ISPMan Home"/>
            <mx:Button id="logout"
                       label='{resourceManager.getString("ispman", "Logout")}'/>
        </mx:HBox>
    </mx:ApplicationControlBar>
    <mx:HDividedBox id="mainContent" width="100%" height="100%">
    </mx:HDividedBox>
</mx:Application>
